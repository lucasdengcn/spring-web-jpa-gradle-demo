import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'java'
	id 'maven-publish'
	id 'jacoco'
	id 'pmd'
	id "org.openapi.generator" version "7.4.0"
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.netflix.dgs.codegen' version '6.0.3'
	//id 'org.springframework.cloud.contract' version '4.1.0'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.jetbrains.kotlin.jvm' version '1.9.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.22'
	id "com.jfrog.artifactory" version "5.+"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootVersion', '3.2.3')
	set('springBootAdminVersion', "3.2.1")
	set('springCloudVersion', "2023.0.0")
	set('mapStructVersion', "1.5.5.Final")
	set('lombokMapstructBindingVersion', "0.2.0")
	set('openApiGeneratedOutput', "$rootDir/demo-model")
	set('openApiGeneratedPackageName', 'com.example.demo.employee')
	set('openApiSpecFile', 'specification/oas.yaml')
}

allprojects {
	repositories {
		maven {
			url 'https://maven.aliyun.com/repository/public/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/spring/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/gradle-plugin'
		}
		mavenLocal()
		mavenCentral()
	}
}

kotlin {
	jvmToolchain(21)
}

bootJar {
	mainClass = 'com.example.demo.Application'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.jetbrains.kotlin.jvm'
	apply plugin: 'org.jetbrains.kotlin.plugin.spring'
	apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
	apply plugin: 'org.asciidoctor.jvm.convert'
	apply plugin: 'maven-publish'
	apply plugin: 'pmd'

	group = 'com.example.demo'
	version = '0.0.1-SNAPSHOT'

	java {
		sourceCompatibility = '21'
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
			mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		//
		implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
		implementation "org.mapstruct:mapstruct:${mapStructVersion}"
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
		implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
		//
		implementation 'org.jetbrains.kotlin:kotlin-reflect'
		compileOnly 'org.projectlombok:lombok:1.18.30'
		compileOnly 'com.alibaba.p3c:p3c-pmd:2.1.1'
		//
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
		annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
		//
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}

//tasks.named('contractTest') {
//	useJUnitPlatform()
//}

	tasks.withType(KotlinCompile) {
		kotlinOptions {
			freeCompilerArgs += '-Xjsr305=strict'
			jvmTarget = '21'
		}
	}

	tasks.named('test') {
		outputs.dir snippetsDir
		useJUnitPlatform()
	}

	tasks.named('asciidoctor') {
		inputs.dir snippetsDir
		dependsOn test
	}

	generateJava {
		schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
		packageName = 'com.example.demo.codegen'
		generateClient = true
	}

	compileJava {
		options.compilerArgs = [
				'-Amapstruct.unmappedTargetPolicy=IGNORE'
		]
		options.annotationProcessorPath = configurations.annotationProcessor
	}

	pmd {
		consoleOutput = true
		toolVersion = "7.1.0"
		rulesMinimumPriority = 5
		//targetJdk = 21
		ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
	}

	apply from: "$rootDir/jacoco-build.gradle"
	apply from: "$rootDir/publish.gradle"

}

//contracts {
//}

apply from: 'openapi-generator.gradle'
